{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf4819ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 10\n",
    "booked_seat = 0\n",
    "prize_of_ticket = 0\n",
    "total_income = 0\n",
    "Row = int(input('enter the number of rows - \\n'))\n",
    "Seats = int(input('enter the number of seats in a row - \\n'))\n",
    "total_seats = Row*Seats\n",
    "booked_ticket = [[None for j in range(Seats)] for i in range(Row)]\n",
    "\n",
    "class chart:\n",
    "    def chartMaker():\n",
    "        seats_chart={}\n",
    "        for i in range(Row):\n",
    "            seats_in_row={}\n",
    "            for j in range(Seats):\n",
    "                seats_in_row[str(j+1)]='S'\n",
    "            seats_chart[str(i)]=seats_in_row\n",
    "        return seats_chart\n",
    "    \n",
    "    def find_percentage():\n",
    "        percentage=(booked_seat/total_seats)*100\n",
    "        return percentage\n",
    "    \n",
    "class_call= chart\n",
    "table_of_chart = class_call.chartMaker()\n",
    "\n",
    "while x!=0:\n",
    "    print('1.show the seats \\n2. buy a ticket \\n3. statistics \\n4. Show booked ticket user info \\n0.Exit')\n",
    "    x = int(input('select option -'))\n",
    "    if x==1:\n",
    "        if Seats<10:\n",
    "            for seat in range(Seats):\n",
    "                print(seat,end='  ')\n",
    "            print(Seats)\n",
    "        else:\n",
    "            for seat in range(Seats):\n",
    "                print(seat, end='  ')\n",
    "            for seat in range(10,Seats):\n",
    "                print(seat, end=' ')\n",
    "            print(Seats)\n",
    "        if Seats<10:\n",
    "            for num in table_of_chart.keys():\n",
    "                print(int(num)+1,end='  ')\n",
    "                for no in table_of_chart[num].values():\n",
    "                    print(no, end='  ')\n",
    "                print()\n",
    "        else:\n",
    "            count_num=0\n",
    "            for num in table_of_chart.keys():\n",
    "                if int(list(table_of_chart.keys())[count_num])<9:\n",
    "                    print(int(num)+1,end='  ')\n",
    "                else:\n",
    "                    print(int(num)+1,end=' ')\n",
    "                count_key=0\n",
    "                for no in table_of_chart[num].values():\n",
    "                    if int(list(table_of_chart[num].keys())[count_key])<=10:\n",
    "                        print(no,end='  ')\n",
    "                    else:\n",
    "                        print(no,end='  ')\n",
    "                    count_key += 1\n",
    "                count_num += 1\n",
    "                print()\n",
    "        print('vacant seats =', total_seat - booked_seat)\n",
    "        print()\n",
    "    \n",
    "    elif x == 2:\n",
    "        Row_number=int(input('enter the row number - \\n'))\n",
    "        column_number=int(input('enter the column number - \\n'))\n",
    "        if Row_number in range(1,Row+1) and column_number in range(1,seats+1):\n",
    "            if table_of_chart[str(Row_number-1)][str(column_number)] =='S':\n",
    "                if Row*Seats <= 60:\n",
    "                    prize_of_ticket = 220\n",
    "                elif Row_number<=int(Row/2):\n",
    "                    prize_of_ticket = 220\n",
    "                else:\n",
    "                    prize_of_ticket = 180\n",
    "                print('prize of ticket=','Rs.',prize_of_ticket)\n",
    "                confirm = input('type yes for booking or type cancel-')\n",
    "                personal_detail = {}\n",
    "                if confirm == 'yes':\n",
    "                    personal_detail['name']=input('enter your name -')\n",
    "                    personal_detail['gender']=input('state your gender -')\n",
    "                    personal_detail['age']=int(input('enter your age'))\n",
    "                    personal_detail['phone_number']=int(input('enter your phone number -'))\n",
    "                    personal_detail['ticket prize']=prize_of_ticket\n",
    "                    table_of_chart[str(Row_number-1)][str(column_number)] = 'B'\n",
    "                    booked_seat += 1\n",
    "                else:\n",
    "                    continue\n",
    "                    booked_ticket[Row_number-1][column_number-1]=personal_detail\n",
    "                    print('booked succesfully')\n",
    "            else:\n",
    "                print('particular seat is already booked')\n",
    "        else:\n",
    "            print()\n",
    "            print('*** invalid input ***')\n",
    "        print()\n",
    "    \n",
    "    \n",
    "    elif x == 3:\n",
    "        print('number of purchased ticket -',booked_seat)\n",
    "        print('percentage -',class_call.find_percentage())\n",
    "        print('current income -','Rs.',prize_of_ticket)\n",
    "        print('total income -','Rs.',total_income)\n",
    "        print()\n",
    "        \n",
    "    elif x == 4:\n",
    "        enter_row =int(input('enter the row number - \\n'))\n",
    "        enter_column =int(input('enter the column number - \\n'))\n",
    "        if enter_row in range(1,Row+1) and enter_column in range(1,Seats+1):\n",
    "            if table_of_chart[str(enter_row-1)][str(enter_column)] == 'B':\n",
    "                person = booked_ticket[enter_row-1][enter_column-1]\n",
    "                print('name-',person['name'])\n",
    "                print('gender-',person['gender'])\n",
    "                print('age-',person['age'])\n",
    "                print('phone no. -',person['phone_number'])\n",
    "            else:\n",
    "                print()\n",
    "                print('*** vacant seat ***')\n",
    "        else:\n",
    "            print()\n",
    "            print(\"**** invalid input ****\")\n",
    "        print()\n",
    "    else:\n",
    "        print()\n",
    "        print('**** invalid input****')\n",
    "        print()\n",
    "        \n",
    "        \n",
    "    \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad8cce09",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
